"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPOW2Value = exports.getNearestPOW2Value = exports.getNextPOW2Value = exports.getPreviousPOW2Value = void 0;
const checkInvalidInputs = (inputValue) => {
    return (inputValue === -Infinity || inputValue === Infinity || inputValue === undefined);
};
const calculateNextPOW2Value = (inputValue) => {
    return Math.pow(2, Math.ceil(Math.log(inputValue) / Math.log(2)));
};
const calculatePreviousPOW2Value = (inputValue) => {
    return Math.pow(2, Math.floor(Math.log(inputValue) / Math.log(2)));
};
exports.getPreviousPOW2Value = (inputValue) => {
    if (checkInvalidInputs(inputValue))
        return 0;
    if (inputValue <= 2)
        return 2;
    const previousPOW2 = calculatePreviousPOW2Value(inputValue);
    return (previousPOW2 === inputValue) ? exports.getPreviousPOW2Value(inputValue - 1) : previousPOW2;
};
exports.getNextPOW2Value = (inputValue) => {
    if (checkInvalidInputs(inputValue))
        return 0;
    if (inputValue < 2)
        return 2;
    const nextPOW2 = calculateNextPOW2Value(inputValue);
    return (nextPOW2 === inputValue) ? exports.getNextPOW2Value(inputValue + 1) : nextPOW2;
};
exports.getNearestPOW2Value = (inputValue) => {
    if (exports.isPOW2Value(inputValue))
        return inputValue;
    const previousValue = exports.getPreviousPOW2Value(inputValue);
    const nextValue = exports.getNextPOW2Value(inputValue);
    const nextValueDiff = nextValue - inputValue;
    const previousValueDiff = inputValue - previousValue;
    return (nextValueDiff <= previousValueDiff) ? nextValue : previousValue;
};
exports.isPOW2Value = (inputValue) => {
    if (checkInvalidInputs(inputValue))
        return false;
    const previousPOW2 = calculatePreviousPOW2Value(inputValue);
    const nextPOW2 = calculateNextPOW2Value(inputValue);
    return previousPOW2 === nextPOW2;
};
