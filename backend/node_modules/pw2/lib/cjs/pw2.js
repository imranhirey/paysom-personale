"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jimp_1 = __importDefault(require("jimp"));
const utils_1 = require("./utils");
const resizingModes_js_1 = __importDefault(require("./resizingModes.js"));
const PW2ValueConverter_js_1 = require("./PW2ValueConverter.js");
const createPw2 = () => {
    function getFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            if (Buffer.isBuffer(file))
                return yield jimp_1.default.read(file);
            else if (utils_1.isArrayBuffer(file))
                return yield jimp_1.default.read(utils_1.bufferFromArrayBuffer(file));
            else if (typeof file === 'string')
                return yield jimp_1.default.read(file);
            else
                throw new Error('Input file should be Buffer or string!');
        });
    }
    function resize(file, resizingMode) {
        return __awaiter(this, void 0, void 0, function* () {
            const { width, height } = getNewDimensions(resizingMode, file.getWidth(), file.getHeight());
            return yield file.resize(width, height);
        });
    }
    function getNewDimensions(resizingMode, inputWidth, inputHeight) {
        let newWidth = 0;
        let newHeight = 0;
        switch (resizingMode) {
            case resizingModes_js_1.default.PREVIOW_PW2:
                newWidth = PW2ValueConverter_js_1.getPreviousPOW2Value(inputWidth);
                newHeight = PW2ValueConverter_js_1.getPreviousPOW2Value(inputHeight);
                break;
            case resizingModes_js_1.default.NEXT_PW2:
                newWidth = PW2ValueConverter_js_1.getNextPOW2Value(inputWidth);
                newHeight = PW2ValueConverter_js_1.getNextPOW2Value(inputHeight);
                break;
            default:
                newWidth = PW2ValueConverter_js_1.getNearestPOW2Value(inputWidth);
                newHeight = PW2ValueConverter_js_1.getNearestPOW2Value(inputHeight);
                break;
        }
        return {
            width: newWidth,
            height: newHeight,
        };
    }
    function resizeAndGetBuffer(file, resizingMode = resizingModes_js_1.default.NEAREST_PW2) {
        return __awaiter(this, void 0, void 0, function* () {
            const jimpFile = yield getFile(file);
            const resizedFile = yield resize(jimpFile, resizingMode);
            return yield resizedFile.getBufferAsync(jimpFile.getMIME());
        });
    }
    function resizeAndGetBase64(file, resizingMode = resizingModes_js_1.default.NEAREST_PW2) {
        return __awaiter(this, void 0, void 0, function* () {
            const jimpFile = yield getFile(file);
            const resizedFile = yield resize(jimpFile, resizingMode);
            return yield resizedFile.getBase64Async(jimpFile.getMIME());
        });
    }
    return {
        resizeAndGetBuffer,
        resizeAndGetBase64
    };
};
exports.default = createPw2;
