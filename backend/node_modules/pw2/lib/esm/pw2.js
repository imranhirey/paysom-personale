var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Jimp from 'jimp';
import { isArrayBuffer, bufferFromArrayBuffer } from './utils';
import RESIZING_MODES from './resizingModes.js';
import { getNearestPOW2Value, getNextPOW2Value, getPreviousPOW2Value, } from './PW2ValueConverter.js';
const createPw2 = () => {
    function getFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            if (Buffer.isBuffer(file))
                return yield Jimp.read(file);
            else if (isArrayBuffer(file))
                return yield Jimp.read(bufferFromArrayBuffer(file));
            else if (typeof file === 'string')
                return yield Jimp.read(file);
            else
                throw new Error('Input file should be Buffer or string!');
        });
    }
    function resize(file, resizingMode) {
        return __awaiter(this, void 0, void 0, function* () {
            const { width, height } = getNewDimensions(resizingMode, file.getWidth(), file.getHeight());
            return yield file.resize(width, height);
        });
    }
    function getNewDimensions(resizingMode, inputWidth, inputHeight) {
        let newWidth = 0;
        let newHeight = 0;
        switch (resizingMode) {
            case RESIZING_MODES.PREVIOW_PW2:
                newWidth = getPreviousPOW2Value(inputWidth);
                newHeight = getPreviousPOW2Value(inputHeight);
                break;
            case RESIZING_MODES.NEXT_PW2:
                newWidth = getNextPOW2Value(inputWidth);
                newHeight = getNextPOW2Value(inputHeight);
                break;
            default:
                newWidth = getNearestPOW2Value(inputWidth);
                newHeight = getNearestPOW2Value(inputHeight);
                break;
        }
        return {
            width: newWidth,
            height: newHeight,
        };
    }
    function resizeAndGetBuffer(file, resizingMode = RESIZING_MODES.NEAREST_PW2) {
        return __awaiter(this, void 0, void 0, function* () {
            const jimpFile = yield getFile(file);
            const resizedFile = yield resize(jimpFile, resizingMode);
            return yield resizedFile.getBufferAsync(jimpFile.getMIME());
        });
    }
    function resizeAndGetBase64(file, resizingMode = RESIZING_MODES.NEAREST_PW2) {
        return __awaiter(this, void 0, void 0, function* () {
            const jimpFile = yield getFile(file);
            const resizedFile = yield resize(jimpFile, resizingMode);
            return yield resizedFile.getBase64Async(jimpFile.getMIME());
        });
    }
    return {
        resizeAndGetBuffer,
        resizeAndGetBase64
    };
};
export default createPw2;
